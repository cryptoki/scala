package b_recursion

import org.scalatest.FlatSpec

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * It's a test from project euler.
 */
class b_FibonacciTest extends FlatSpec{
  
  /**
   * 0, 1, 1, 2, 3, 5, 8, 13, 21 --> fibs less 10 => first 9 elements
   * 0, 2, 8 = 10
   */
  def sumEvenValuedTerms(maximum: Int) : Long = ???

  "sum of even valued fibs less 10" should "be 5" in {
    val count = sumEvenValuedTerms(10)
    assert(count == 10)
  }

  "sum of even valued fibs less 4 million" should "be 4613732" in {
    val count = sumEvenValuedTerms(4000000)
    assert(count == 4613732)
  }
}
